var shaders = {};
shaders.aoeFrag = "precision mediump float;\n\nvarying vec2 position;\nvarying float p;\nfloat pi = 3.14159265359;\n\nvec2 dimensions = vec2(400, 400);\n\nuniform sampler2D texture;\n\nvoid main(){\n    vec2 sqr = position * position;\n    \n    float d = sqr.x + sqr.y;\n    if(d > 0.5 * 0.5){\n        discard;\n    }\n    \n    float r = pi + atan(position.x, -position.y);\n    \n    \n    vec2 offset = 0.15 * position * p;\n    float x = d \/ 0.25;\n    \n    float offsetScale = 0.5 * (sin(pi * (1.0 - x * x)) + sin(pi * x));\n    \n    offsetScale += 0.4 * sin(r * 10.0 + pi * p * 2.0) * offsetScale;\n    \n    vec2 pos = gl_FragCoord.xy \/ dimensions - 0.5 * offset * offsetScale;\n    \n    vec4 sample = texture2D(texture, pos);\n    \n    gl_FragColor = vec4(sample.xyz * (1.0 - 0.08 * p),1);\n}\n";
shaders.aoeVert = "attribute vec3 xyp;\nattribute vec2 vert;\nattribute vec2 tex;\n\nvarying float p;\nvarying vec2 position;\n\nvec2 dimensions = vec2(400, 400);\n\nvoid main(){\n    \n    vec2 pos = vert + xyp.xy;\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(0.5,0.5) \/ dimensions, 0, 1);\n    \n    p = xyp.p;\n    position = tex - vec2(0.5,0.5);\n}";
shaders.coloredFrag = "precision mediump float;\n\nvarying vec3 oColor;\n\nvoid main(){\n    gl_FragColor = vec4(oColor, 1);\n}\n";
shaders.coloredVert = "precision mediump float;\n\n\nattribute vec2 pos;\nattribute vec3 color;\n\nvarying vec3 oColor;\n\nvec2 dimensions = vec2(400, 400);\n\n\nvoid main(){\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(0.5,0.5) \/ dimensions, 0, 1);\n    oColor = color;\n}";
shaders.labelsFrag = "precision mediump float;\n\nvarying vec2 oTexCoord;\n\nuniform sampler2D texture;\n\nvoid main(){\n    vec4 textureColor = texture2D(texture, oTexCoord);\n    \n    gl_FragColor = textureColor;\n}\n";
shaders.labelsVert = "precision mediump float;\n\n\nvarying vec2 oTexCoord;\n\nattribute vec2 vert;\nattribute vec3 xyl;\n\nvec2 dimensions = vec2(400.0, 400);\n\n\nvoid main(){\n    vec2 pos = vert + xyl.xy;\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(1,1) \/ dimensions, 0, 1);\n\n    \n    \/\/ vert 0 or 15 for x, 0 or 10 for y\n    \n    float number = xyl.z;\n    float xloc = mod(number, 17.0) * 15.0;\n    float yloc = floor(number \/ 17.0) * 10.0;\n    \n    \/\/ texture dimensions are 256 x 64\n    \n    oTexCoord = vec2(xloc \/ 256.0, yloc \/ 64.0 + 10.0 \/ 64.0) + vec2(vert.x \/ 15.0, vert.y \/ 10.0) * vec2(16.0 \/ 256.0, -10.0 \/ 64.0);\n    oTexCoord.y =  1.0 - oTexCoord.y;\n    \n    \n    \/\/oTexCoord = texIndex;\n}";
shaders.mobFrag = "precision mediump float;\n\nvarying vec2 position;\nvarying float p;\nfloat pi = 3.14159265359;\n\nvoid main(){\n    vec2 sqr = position * position;\n    \n    if(sqr.x + sqr.y > 0.5 * 0.5){\n        discard;\n    }\n    float ap = abs(p);\n    if(ap < pi + atan(position.x, -position.y)){\n        gl_FragColor = vec4(0,0,0,1);\n    }else{\n        if(p < 0.0){\n            gl_FragColor = vec4(182.0\/255.0,\n                           40.0\/255.0,\n                           0.0\/255.0,\n                           1);\n        }else{\n            gl_FragColor = vec4(0.0\/255.0,\n                           182.0\/255.0,\n                           21.0\/255.0,\n                           1);\n        }\n    }\n}\n";
shaders.mobVert = "attribute vec3 xyp;\nattribute vec2 vert;\nattribute vec2 tex;\n\nvarying float p;\nvarying vec2 position;\n\nvec2 dimensions = vec2(400, 400);\n\nvoid main(){\n    \n    vec2 pos = vert + xyp.xy;\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(0.5,0.5) \/ dimensions, 0, 1);\n    \n    p = xyp.p;\n    \n    position = tex - vec2(0.5,0.5);\n}";
shaders.notexFrag = "precision mediump float;\n\nuniform vec4 color;\n\nvoid main(){\n    gl_FragColor = color;\n}\n";
shaders.notexVert = "precision mediump float;\n\n\nattribute vec2 pos;\n\nvec2 dimensions = vec2(400, 400);\n\n\nvoid main(){\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(0.5,0.5) \/ dimensions, 0, 1);\n}";
shaders.snowFrag = "precision mediump float;\n\nvarying vec2 oTexCoord;\nvarying float p;\n\nuniform sampler2D texture;\n\nvoid main(){\n    vec4 textureColor = texture2D(texture, oTexCoord);\n    \n    textureColor.a *= p;\n    gl_FragColor = textureColor;\n}\n";
shaders.snowVert = "attribute vec3 xyp;\nattribute vec2 vert;\nattribute vec2 tex;\n\nvarying vec2 oTexCoord;\nvarying float p;\n\nvec2 dimensions = vec2(400, 400);\n\nfloat pi = 3.14159265359;\n\nvoid main(){\n    \n    vec2 pos = vec2(\n        vert.x * cos(xyp.p) - vert.y * sin(xyp.p),\n        vert.x * sin(xyp.p) + vert.y * cos(xyp.p)\n    ) + xyp.xy;\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(0.5,0.5) \/ dimensions, 0, 1);\n    \n    p = (1.0 - pow(1.0-sin(xyp.p * 0.5), 3.0)) * 0.7;\n    oTexCoord = tex;\n}";
shaders.standardFrag = "precision mediump float;\n\nvarying vec2 oTexCoord;\n\nuniform sampler2D texture;\n\nvoid main(){\n    vec4 textureColor = texture2D(texture, oTexCoord);\n    \n    gl_FragColor = textureColor;\n}\n";
shaders.standardVert = "precision mediump float;\n\n\nvarying vec2 oTexCoord;\n\nattribute vec2 pos;\nattribute vec2 texIndex;\n\nvec2 dimensions = vec2(400.0, 400);\n\n\nvoid main(){\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(1,1) \/ dimensions, 0, 1);\n\n    oTexCoord = texIndex;\n}";
shaders.towerFrag = "precision mediump float;\n\nvarying vec2 oTexCoord;\n\nuniform sampler2D texture;\n\nvoid main(){\n    vec4 textureColor = texture2D(texture, oTexCoord);\n    \n    gl_FragColor = textureColor;\n}\n";
shaders.towerVert = "attribute vec2 xy;\nattribute float p;\nattribute vec2 vert;\nattribute vec2 tex;\n\nvarying vec2 oTexCoord;\n\nvec2 dimensions = vec2(400, 400);\n\nfloat pi = 3.14159265359;\n\nvoid main(){\n    \n    vec2 pos = vec2(\n        vert.x * cos(p) - vert.y * sin(p),\n        vert.x * sin(p) + vert.y * cos(p)\n    ) + xy;\n    gl_Position = vec4(2.0 * pos \/ dimensions - vec2(1,1) + vec2(0.5,0.5) \/ dimensions, 0, 1);\n    \n    oTexCoord = tex;\n}";